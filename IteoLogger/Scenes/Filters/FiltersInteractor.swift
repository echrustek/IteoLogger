//
//  FiltersInteractor.swift
//  IteoLogger
//
//  Created by Patryk Średziński on 05/02/2021.
//  Copyright (c) 2021 iteo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates by Patryk Średziński
//

import Foundation

protocol FiltersInteractor {
    func reloadFilters()
    func toggleLevel(_ level: IteoLoggerLevel)
    func toggleModule(_ module: IteoLoggerModule)
    func toggleAllLevels()
    func toggleAllModules()
    func clearAllFilters()
    func saveFilters()
}

final class FiltersInteractorImpl {
    
    private let presenter: FiltersPresenter
    private let worker: FiltersWorker
    private let router: FiltersRouter
    private var filter: LogFilter
    private let availableModules: Set<IteoLoggerModule>
    private let availableLevels: Set<IteoLoggerLevel>
    
    init(presenter: FiltersPresenter,
         worker: FiltersWorker,
         router: FiltersRouter,
         filter: LogFilter,
         availableModules: Set<IteoLoggerModule>,
         availableLevels: Set<IteoLoggerLevel>) {
        self.presenter = presenter
        self.worker = worker
        self.router = router
        self.filter = filter
        self.availableModules = availableModules
        self.availableLevels = availableLevels
    }
    
    func toggleLevel(_ level: IteoLoggerLevel) {
        if filter.levels.contains(level) {
            filter.levels.remove(level)
        } else {
            filter.levels.insert(level)
        }
        reloadFilters()
    }
    
    func toggleModule(_ module: IteoLoggerModule) {
        if filter.modules.contains(module) {
            filter.modules.remove(module)
        } else {
            filter.modules.insert(module)
        }
        reloadFilters()
    }
    
    func toggleAllLevels() {
        if filter.levels.isEmpty {
            filter.levels = availableLevels
        } else {
            filter.levels = []
        }
        reloadFilters()
    }
    
    func toggleAllModules() {
        if filter.modules.isEmpty {
            filter.modules = availableModules
        } else {
            filter.modules = []
        }
        reloadFilters()
    }
    
    func clearAllFilters() {
        filter.modules = availableModules
        filter.levels = availableLevels
        reloadFilters()
    }
    
    func saveFilters() {
        router.saveFilters(filter)
        do {
            try worker.saveFilters(filter)
        } catch {
            presenter.showError(error)
        }
    }
    
}

extension FiltersInteractorImpl: FiltersInteractor {
    
    func reloadFilters() {
        presenter.reloadFilters(filter, availableModules: availableModules, availableLevels: availableLevels)
    }
    
}
