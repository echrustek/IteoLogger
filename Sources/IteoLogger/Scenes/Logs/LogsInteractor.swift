//
//  LogsInteractor.swift
//  IteoLogger
//
//  Created by Patryk Średziński on 05/02/2021.
//  Copyright (c) 2021 iteo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates by Patryk Średziński
//

import Foundation

protocol LogsInteractor {
    func loadNextSection(id: Int)
    func copyLog()
    func reloadLogs()
    func deleteLogs()
    func shareLogs(sessions: [LogSectionItem])
    func displayFilters()
}

final class LogsInteractorImpl {
    
    private let presenter: LogsPresenter
    private let worker: LogsWorker
    private let router: LogsRouter
    private var filter: LogFilter

    private let backgroundQueue = DispatchQueue(label: String(describing: LogsInteractor.self), qos: .background)
    
    private var isLoading = false

    init(presenter: LogsPresenter,
         worker: LogsWorker,
         router: LogsRouter,
         filter: LogFilter) {
        self.presenter = presenter
        self.worker = worker
        self.router = router
        self.filter = filter
    }
}

extension LogsInteractorImpl: LogsInteractor {
    
    func loadNextSection(id: Int) {
        guard !isLoading else { return }
        isLoading = true
        presenter.toggleSpinner(true)
        backgroundQueue.async {
            let logs = self.worker.loadLogs(at: id, filter: self.filter)
            self.presenter.toggleSpinner(false)
            self.isLoading = false
            let sessionCount = self.worker.loadedSessionsCount()
            guard sessionCount - id > 0 else { return }
            self.presenter.buildSection(index: sessionCount - id, logs: logs)
        }
        
    }
    
    func copyLog() {
        presenter.showAlert(title: "Log", body: "Copied log details to pasteboard", leftTitle: "OK", leftAction: nil, rightTitle: nil, rightAction: nil)
    }
    
    func reloadLogs() {
        presenter.reloadLogs()
        loadNextSection(id: 0)
    }
    
    func deleteLogs() {
        presenter.showAlert(title: "Delete", body: "Do you really want to permanently delete all the logs?", leftTitle: "Yes", leftAction: {
            self.deleteLogDirectory()
        }, rightTitle: "No", rightAction: nil)
    }
    
    func shareLogs(sessions: [LogSectionItem]) {
        presenter.toggleSpinner(true)
        backgroundQueue.async { [weak self] in
            let logData = self?.worker.prepareShareData(sessions: sessions)
            DispatchQueue.main.async { [weak self] in
                self?.presenter.toggleSpinner(false)
                guard let logHeader = logData?.header, let logUrl = logData?.fileUrl else { return }
                self?.router.displaySharingController(logHeader, logUrl)
            }
        }
    }
    
    func displayFilters() {
        router.displayFilters(filter, availableModules: worker.availableModules, availableLevels: worker.availableLevels, delegate: self)
    }
    
}

private extension LogsInteractorImpl {
    
    private func deleteLogDirectory() {
       
        backgroundQueue.async {
            self.worker.deleteLogs()
            self.presenter.reloadLogs()
        }
        
    }
    
}


extension LogsInteractorImpl: FiltersRouterDelegate {
 
    func saveFilters(_ filters: LogFilter) {
        self.filter = filters
        reloadLogs()
    }
    
}
